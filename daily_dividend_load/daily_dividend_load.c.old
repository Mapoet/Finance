// daily_div_load.c
/* use http://finance.yahoo.com/q/ks?s="$Symbol"+Key+Statistics" to get Div data
 * NOTE: http://download.finance.yahoo.com/d/quotes.csvr?e=.csv&f=dyqr1&s= gives BAD DATA
 * Create SQL to load Dividend data for a stock symbol into the Investments.Dividends table
 * Assumes that current data is more accurate than previous version and 
 * will update in place where symbol, exDiv date and DivPay date all match.
 * 
 * compile: gcc -Wall -O2 -ffast-math daily_dividend_load.c -o daily_dividend_load `mysql_config --include --libs` `curl-config --libs`
 */

#define		MINVOLUME	"80000"
#define		MINPRICE	"14"
#define		MAXPRICE	"250"

#define _XOPENSOURCE
#define		MAX_PERIODS	200
#include	<my_global.h>
#include	<my_sys.h>
#include	<mysql.h>
#include	<string.h>
#include	<time.h>
#include	<errno.h>
#include	<curl/curl.h>
#include	<ctype.h>

struct	MemStruct {
  char *memory;
  size_t size;
};
MYSQL *mysql;
MYSQL_RES *result;
MYSQL_ROW row;
char	qDate[12];

#include	"Includes/print_error.inc"
#include	"Includes/valid_date.inc"
#include	"Includes/holiday_check.inc"
#include	"Includes/ParseData.inc"

int	main(int argc, char * argv[]) {

  MYSQL_RES *result_list;
  MYSQL_ROW row_list;
  char	*query_list="select distinct(symbol) from stockinfo \
    where exchange in (\"NasdaqNM\",\"NGM\", \"NCM\", \"NYSE\") \
    and active = \"1\" \
    and low_52weeks > \""MINPRICE"\" \
    and high_52weeks < \""MAXPRICE"\" \
    and avg_volume > \""MINVOLUME"\" \
    order by symbol";

  char	qURL[1024];
  char	*div_query;
  char	*next_tok;
  char	*saveptr;
  char	buf[1024];
  char	DivRate[24];
  char	DivYield[24];
  char	ExDivDate[24];
  char	DivPayDate[24];
  char	CurYear[6];
  CURL *curl;
  CURLcode	res;
  struct	MemStruct	chunk;
  time_t t;
  struct tm *TM;


  if (argc > 2) {
    printf("Usage: %s [yyyy-mm-dd]\n",argv[0]);
    exit(EXIT_FAILURE);
  }
  // initialize time structures
  t = time(NULL);
  TM = localtime(&t);
  if (TM == NULL) {
    perror("localtime");
    if (mysql != NULL) mysql_close(mysql);
    exit(EXIT_FAILURE);
  }
  if (argc==2) {
    strcpy(qDate,argv[1]);
  } else {
    if (strftime(qDate, sizeof(qDate), "%F", TM) == 0) {
      fprintf(stderr, "strftime returned 0");
      if (mysql != NULL) mysql_close(mysql);
      exit(EXIT_FAILURE);
    }
  }
  strptime(qDate,"%F",TM);
  memset(CurYear,0,sizeof(CurYear));
  strftime(CurYear,sizeof(CurYear),"%Y",TM);

 // connect to the database
  #include "Includes/beancounter-conn.inc"
  holiday_check(qDate);
  if (mysql_query(mysql,query_list)) {
    print_error(mysql, "Failed to query database");
  }
  result_list=mysql_store_result(mysql);
  if ((result_list==NULL) && (mysql_errno(mysql))) {
    print_error(mysql, "store_results failed");
  } 

  div_query = calloc(2,1);
  chunk.memory = calloc(1,1);
  chunk.size = 0;
  curl_global_init(CURL_GLOBAL_NOTHING);
  curl=curl_easy_init();
  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, ParseData);
  curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);

  //Big Loop through all Symbols
  while ((row_list=mysql_fetch_row(result_list))) {
    if(row_list == NULL) { fprintf(stderr,"Skipping bad or missing data for %s\n",row_list[0]); continue; }
    valid_date(row_list[0]);
    chunk.size = 0;
    if(curl) {
      sprintf(qURL,"http://download.finance.yahoo.com/d/quotes.csvr?e=.csv&f=dyqr1&s=%s",row_list[0]);
      curl_easy_setopt(curl, CURLOPT_URL, qURL);
      res=curl_easy_perform(curl);
    } 
    if (!curl || res) {
      printf("Oop!, Lost internet connection\n");
      free(chunk.memory);
      free(div_query);
      #include "Includes/mysql-disconn.inc"
      mysql_free_result(result_list);
      exit(EXIT_FAILURE);
    }
    
    // order is Rate,Yield,ExDiv,DivPay
    // skip "N/A" lines
    if (strstr(chunk.memory,"N/A")) {
      continue;
    }
    memset(DivRate,0,sizeof(DivRate));
    memset(DivYield,0,sizeof(DivYield));
    memset(ExDivDate,0,sizeof(ExDivDate));
    memset(DivPayDate,0,sizeof(DivPayDate));

    next_tok=strtok(chunk.memory,",");	// isolate the Dividend Rate
    strcpy(DivRate,chunk.memory);
    next_tok=strtok(NULL,",");	// isolate the Div Yield
    strcpy(DivYield,next_tok);

    // parse ExDiv date
    next_tok=strtok(NULL,",");	// isolate the ExDiv date
    strcpy(buf,next_tok+1);	// skip the first quote
    memset(strchr(buf,'\"'),0,1);	// remove the trailing quote
    if ((saveptr=strstr(buf,"-"))!=NULL) {	// parse the year
      strcpy(ExDivDate,strstr(saveptr+1,"-")+1);
    } else {
      strcpy(ExDivDate,CurYear);
    }
    if (strcasestr(buf,"JAN")) strcat(ExDivDate,"-1-");
    else if (strcasestr(buf,"FEB")) strcat(ExDivDate,"-2-");
    else if (strcasestr(buf,"MAR")) strcat(ExDivDate,"-3-");
    else if (strcasestr(buf,"APR")) strcat(ExDivDate,"-4-");
    else if (strcasestr(buf,"MAY")) strcat(ExDivDate,"-5-");
    else if (strcasestr(buf,"JUN")) strcat(ExDivDate,"-6-");
    else if (strcasestr(buf,"JUL")) strcat(ExDivDate,"-7-");
    else if (strcasestr(buf,"AUG")) strcat(ExDivDate,"-8-");
    else if (strcasestr(buf,"SEP")) strcat(ExDivDate,"-9-");
    else if (strcasestr(buf,"OCT")) strcat(ExDivDate,"-10-");
    else if (strcasestr(buf,"NOV")) strcat(ExDivDate,"-11-");
    else if (strcasestr(buf,"DEC")) strcat(ExDivDate,"-12-");
    else {
      printf("skipping symbol %s with bad ExDiv date: %s\n",row_list[0],buf);
      continue;	// skip symbol with bad data
    }
    if ((saveptr=strstr(buf,"-"))!=NULL) {	// parse the day
      memset(saveptr,0,1);
      if (strstr(buf," ")) strcat(ExDivDate,buf+1);
      else strcat(ExDivDate,buf);
    } else {
      saveptr=rindex(buf,' ');
      strcat(ExDivDate,saveptr+1);
    }

    
    // parse the Div Pay date
    next_tok=strtok(NULL,",");	// isolate the DivPay date
    strcpy(buf,next_tok+1);	// skip the first quote
    memset(strchr(buf,'\"'),0,1);	// remove the trailing quote
    if ((saveptr=strstr(buf,"-"))!=NULL) {	// parse the year
      strcpy(DivPayDate,strstr(saveptr+1,"-")+1);
    } else {
      strcpy(DivPayDate,CurYear);
    }
    if (strcasestr(buf,"JAN")) strcat(DivPayDate,"-1-");
    else if (strcasestr(buf,"FEB")) strcat(DivPayDate,"-2-");
    else if (strcasestr(buf,"MAR")) strcat(DivPayDate,"-3-");
    else if (strcasestr(buf,"APR")) strcat(DivPayDate,"-4-");
    else if (strcasestr(buf,"MAY")) strcat(DivPayDate,"-5-");
    else if (strcasestr(buf,"JUN")) strcat(DivPayDate,"-6-");
    else if (strcasestr(buf,"JUL")) strcat(DivPayDate,"-7-");
    else if (strcasestr(buf,"AUG")) strcat(DivPayDate,"-8-");
    else if (strcasestr(buf,"SEP")) strcat(DivPayDate,"-9-");
    else if (strcasestr(buf,"OCT")) strcat(DivPayDate,"-10-");
    else if (strcasestr(buf,"NOV")) strcat(DivPayDate,"-11-");
    else if (strcasestr(buf,"DEC")) strcat(DivPayDate,"-12-");
    else {
      printf("skipping symbol %s with bad DivPay date: %s\n",row_list[0],buf);
      continue;	// skip symbol with bad data
    }
    if ((saveptr=strstr(buf,"-"))!=NULL) {	// parse the day
      memset(saveptr,0,1);
      if (strstr(buf," ")) strcat(DivPayDate,buf+1);
      else strcat(DivPayDate,buf);
    } else {
      saveptr=rindex(buf,' ');
      strcat(DivPayDate,saveptr+1);
    }

    // create Div data load SQL
    sprintf (buf,"REPLACE INTO Investments.Dividends () VALUES(\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",DEFAULT,DEFAULT);\n",
    row_list[0],DivRate,DivYield,ExDivDate,DivPayDate);
    div_query = realloc(div_query, strlen((char *)div_query)+strlen(buf)+1);
    if (div_query == NULL) {
      printf("not enough memory to realloc div_query\n");
      exit(EXIT_FAILURE);
    }
    strcat(div_query,buf);	// add the buffer to the end of the query list
  }	// end of Big Loop
  
  printf("%s",div_query);
  mysql_free_result(result_list);
  
//	FOR PRODUCTION USE ONLY
  mysql_set_server_option(mysql,MYSQL_OPTION_MULTI_STATEMENTS_ON);
  if (mysql_query(mysql,div_query)) {
    print_error(mysql, "Failed to update database");
  } else {
    printf("Database update completed with no errors\n");
  }
  
  curl_easy_cleanup(curl);
  free(chunk.memory);
  free(div_query);
// finished with the database
  #include "Includes/mysql-disconn.inc"
  exit(EXIT_SUCCESS);
}
