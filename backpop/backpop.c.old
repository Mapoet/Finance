// backpop.c -- back popluate pricing data in the beancounter.stockprices table through most recent available
/* NOTE: this will overwrite existing data
 * 
 * Parms: Sym [prev-date(default 1 year ago)]
 * compile:  gcc -Wall -O2 -ffast-math -o backpop backpop.c `mysql_config --include --libs` `curl-config --libs`
 * 
 * Yahoo csv data format: Date,Open,High,Low,Close,Volume,Adj Close
 * Note: Yahoo doesn't update the history tables for today's data until later, sometimes after midnight Eastern time
 */

// TEST set DEBUG to 1, else set to 0 for PROD
#define		DEBUG	0
#define		_XOPENSOURCE
#define		_XOPEN_SOURCE
#define		DAY_SECONDS     3600*24

#include        <my_global.h>
#include        <my_sys.h>
#include        <mysql.h>
#include        <string.h>
#include	<unistd.h>
#include	<curl/curl.h>
#include	<ctype.h>

char	errbuf[CURL_ERROR_SIZE];
CURL *curl;
CURLcode	res;
struct	MemStruct chunk;
MYSQL *mysql;
struct	MemStruct {
  char *memory;
  size_t size;
} chunk;

#include        "Includes/print_error.inc"

static size_t ParseTicker(void *contents, size_t size, size_t nmemb, void *userp) {
    size_t realsize = size * nmemb;
    struct MemStruct *mem = (struct MemStruct *)userp;
    
    mem->memory = realloc(mem->memory, mem->size + realsize + 1);
    if (mem->memory == NULL) {	// out of memory!
      printf("not enough memory to realloc\n");
      exit(EXIT_FAILURE);
    }
    memcpy(&(mem->memory[mem->size]), contents, realsize);
    mem->size += realsize;
    mem->memory[mem->size] = 0;
    return realsize;
}

int main(int argc, char * argv[]) {
  char	qDate[12];
  char	query[1024];
  char	qURL[1024];
  char	Sym[16];
  char	thisDate[16];
  char	buf[1024];
  char	day_open[32]="DEFAULT";
  char	day_close[32]="DEFAULT";
  char	day_high[32]="DEFAULT";
  char	day_low[32]="DEFAULT";
  char	day_change[32]="DEFAULT";
  char	volume[32]="DEFAULT";
  char	prev_close[32]="DEFAULT";
  char	prev_date[12]="DEFAULT";
  char	exchange[32]="DEFAULT";
  char	capitalisation[32]="DEFAULT";
  char	low_52weeks[32]="DEFAULT";
  char	high_52weeks[32]="DEFAULT";
  char	earnings[32]="DEFAULT";
  char	dividend[32]="DEFAULT";
  char	p_e_ratio[32]="DEFAULT";
  char	avg_volume[32]="DEFAULT";
  char	*histURL="http://table.finance.yahoo.com/table.csv?a=$a&b=$b&c=$c&d=$d&e=$e&f=$f&s=";
  char	*histURL2="&y=0&g=d&ignore=.csv";
  char 	*saveptr;
  char	*saveptr2;
  MYSQL_RES *result;
  MYSQL_ROW row;
  time_t t,t2;
  struct tm *TM = 0;
  struct tm *TM2 = 0;
  int num_rows,x,updated=0;
  
  // parse cli parms
  if (argc == 1 || argc >3) {
    printf("Usage:  %s Sym [yyyy-mm-dd]\n \
    Supplying today\'s date forces an update from YahooQuote if the market is closed.\n \
    Any other date (or no date) will only update existing price history\n", argv[0]);
    exit(EXIT_FAILURE);
  }
  // initialize the time structures with today
  t = time(NULL);
  TM = localtime(&t);
  TM2 = localtime(&t);
  if (TM == NULL) {
    perror("localtime");
    exit(EXIT_FAILURE);
  }
  // convert symbol parm to uppercase
  memset(Sym,0,sizeof(Sym));
  for (x=0;x<strlen(argv[1]);x++) { Sym[x] = toupper(argv[1][x]); }
  // verify symbol exists in stockinfo, else exit
  #include "Includes/beancounter-conn.inc"
  sprintf(query,"select symbol,active from stockinfo where symbol = \"%s\"",Sym);
  if (mysql_query(mysql,query)) print_error(mysql, "01 Failed to query database");
  result=mysql_store_result(mysql);
  if ((result==NULL) && (mysql_errno(mysql))) print_error(mysql, "store_results failed"); 
  num_rows = mysql_num_rows(result);
  if (num_rows == 0) {	// not a valid ticker symbol
    printf("%s not found in stockinfo, please run \"add_stock\" \n",Sym);
    mysql_free_result(result);
    #include "Includes/mysql-disconn.inc"
    exit(EXIT_FAILURE);
  } else {
    row=mysql_fetch_row(result);
    if (!strcmp(row[1],"0")) {
      mysql_free_result(result);
      printf("%s not active in stockinfo\n",Sym);
      #include "Includes/mysql-disconn.inc"
      exit(EXIT_FAILURE);
    }
  }
  if (argc == 2) {
    // point to last year
    TM->tm_year--;
    strftime(qDate, sizeof(qDate), "%F", TM);
    t = mktime(TM);
  }
  if (argc == 3) {
    // is it a valid date format?
    if (strlen(argv[2]) != 10) {	// no, print message and exit
      printf("Usage:  %s Sym [yyyy-mm-dd}\n", argv[0]);
      exit(EXIT_FAILURE);
    }
    // date parm passed, process it
    strcpy(qDate, argv[2]);
    // validate qDate
    strptime(qDate,"%F",TM);
    t = mktime(TM);
    strftime(buf,sizeof(buf),"%F",TM);
    if (strcmp(qDate,buf)) {
      // dates do not match, reject it
      fprintf(stderr, "Invalid date: input %s converted to %s\n",qDate,buf);
      exit(EXIT_FAILURE);
    }
    // see if a future date was supplied, reject it
    if (t > time(NULL)) {
      fprintf(stderr, "Invalid date: %s is in the future\n",qDate);
      exit(EXIT_FAILURE);
    }
  }	// end If argc==3
  
  // back up a weekend to the previous Friday
  if (TM->tm_wday == 6) {
    t -= DAY_SECONDS; 
    TM = localtime(&t);
    strftime(qDate, sizeof(qDate), "%F", TM);	// save the adjusted date
  } else if (TM->tm_wday == 0) {
    t -= DAY_SECONDS * 2; 
    TM = localtime(&t);
    strftime(qDate, sizeof(qDate), "%F", TM);	// save the adjusted date
  } 
  // check for holidays
  sprintf(query,"select last_bus_day from Investments.holidays where holiday = \"%s\"",qDate);
  if (mysql_query(mysql,query)) print_error(mysql, "01 Failed to query database");
  result=mysql_store_result(mysql);
  if ((result==NULL) && (mysql_errno(mysql))) print_error(mysql, "store_results failed"); 
  num_rows = mysql_num_rows(result);
  mysql_free_result(result);
  if (num_rows == 1) {
    if ((row=mysql_fetch_row(result))==NULL) {
      printf("oops - count() failed\n");
      exit(EXIT_FAILURE);
    }
    strcpy(qDate,row[0]);	// point to last_bus_day
  }
  strptime(qDate,"%F",TM);	// ensure t and TM are concurrent with qDate
  t = mktime(TM);
  
  // start main processing
  printf("Backfilling data for %s from %s\n",Sym,qDate);
  chunk.memory = calloc(1,1);
  chunk.size = 0;
  curl_global_init(CURL_GLOBAL_NOTHING);
  curl=curl_easy_init();
  if(!curl) {
    fprintf(stderr,"curl init failed, aborting process\n");
    exit(EXIT_FAILURE);
  }    
  sprintf(qURL,"%s%s%s",histURL,Sym,histURL2);
  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, ParseTicker);
  curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);
  curl_easy_setopt(curl, CURLOPT_TIMEOUT, 5);
  curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 5);
  curl_easy_setopt(curl, CURLOPT_URL, qURL);
  res=curl_easy_perform(curl);
  if (res) {	// error, no data retrieved
	printf("Error %d Unable to access the internet\n",res);
	printf("%s\n",errbuf);
	print_error(mysql,"curl error, no data retrieved");
  }
  // was any data returned?
  if (strstr(chunk.memory,"404 Not Found")) { 
    printf("%s history data not found online, \"404\" error\n",Sym);
    curl_easy_cleanup(curl);
    free(chunk.memory);
    #include "Includes/mysql-disconn.inc"
    exit(EXIT_FAILURE);
  }
  
  
  // skip the first line of headers
  strtok(chunk.memory ,",");
  // loop until out of data or reached qDate
  while ((saveptr=strtok(NULL,"\n")) != NULL) {
    // extract the date
    if ((saveptr=strtok(NULL,",")) == NULL) break;	// ran past end of data
    strcpy(thisDate,saveptr);
    // check that we haven't passed the prev_date
    strptime(thisDate,"%F",TM2);
    t2=mktime(TM2);
    if (t > t2) break;
    // split out the values
    saveptr=strtok(NULL,",");	
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(day_open,saveptr);
    else strcpy(day_open,"DEFAULT");
    saveptr=strtok(NULL,",");	
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(day_high,saveptr);
    else strcpy(day_high,"DEFAULT");
    saveptr=strtok(NULL,",");	
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(day_low,saveptr);
    else strcpy(day_low,"DEFAULT");
    saveptr=strtok(NULL,",");	
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(day_close,saveptr);
    else strcpy(day_close,"DEFAULT");
    saveptr=strtok(NULL,",");	
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(volume,saveptr);
    else strcpy(volume,"DEFAULT");
    
    // build the SQL string
    sprintf(query,"select symbol from stockprices where symbol = \"%s\" and date = \"%s\"",Sym,thisDate);
    if (mysql_query(mysql,query)) { print_error(mysql, "02 Failed to query database");	}
    result=mysql_store_result(mysql);
    if (result==NULL) { print_error(mysql, "store_results failed"); } 
    // build and run the update or insert query
    if (mysql_num_rows(result)) 	// existing data, just update it
      sprintf(query,"update stockprices set day_open=%s,day_high=%s,day_low=%s,day_close=%s,volume=%s,day_change=DEFAULT,previous_close=DEFAULT \
      where symbol = \"%s\" and date = \"%s\"",day_open,day_high,day_low,day_close,volume,Sym,thisDate);
    else 	// new date, insert it
      sprintf(query,"insert into stockprices (symbol,date,day_open,day_high,day_low,day_close,volume) \
      VALUES(\"%s\",\"%s\",%s,%s,%s,%s,%s)",Sym,thisDate,day_open,day_high,day_low,day_close,volume);
    mysql_free_result(result);
    // update the database
if (!DEBUG)    if (mysql_query(mysql,query))  print_error(mysql, "Failed to update database");
if (DEBUG) printf("%s\n",query);
    // update previous close and day_change for next higher row
    if (strcmp(prev_close,"null")) {
      sprintf(query,"update stockprices set previous_close = \"%s\" where symbol = \"%s\" and date = \"%s\"",day_close,Sym,prev_date);
if (!DEBUG)      if (mysql_query(mysql,query))  print_error(mysql, "Failed to update database");
if (DEBUG)printf("%s\n",query);	//TEST
      sprintf(query,"update stockprices set day_change = \"%.2f\" where symbol = \"%s\" and date = \"%s\"",strtof(prev_close,NULL)-strtof(day_close,NULL),Sym,prev_date);
if (!DEBUG)      if (mysql_query(mysql,query))  print_error(mysql, "Failed to update database");
if (DEBUG)printf("%s\n",query);	//TEST
    }
    updated++;
    if ((strcmp(qDate,thisDate) == 0)) break;	// reached the oldest requested date, quit
    strcpy(prev_date,thisDate);
    strcpy(prev_close,day_close);
  }	// end While
  
  // update the previous_close and day_change for oldest member, if data exists in the database
  if (updated) {
    sprintf(query,"select day_close from stockprices where symbol = \"%s\" and date < \"%s\" \
    order by date desc limit 1",Sym,thisDate);
    if (mysql_query(mysql,query))  print_error(mysql, "Failed to query database");
    result=mysql_store_result(mysql);
    if (result==NULL) print_error(mysql, "store_results failed");
    if (mysql_num_rows(result)) {
      row=mysql_fetch_row(result);
      sprintf(query,"update stockprices set previous_close = \"%s\" where symbol = \"%s\" and date = \"%s\"",row[0],Sym,thisDate);
if (!DEBUG)    if (mysql_query(mysql,query))  print_error(mysql, "Failed to update database");
if (DEBUG)printf("%s\n",query); //TEST
      sprintf(query,"update stockprices set day_change = \"%.2f\" where symbol = \"%s\" and date = \"%s\"",strtof(day_close,NULL)-strtof(row[0],NULL),Sym,thisDate);
if (!DEBUG)    if (mysql_query(mysql,query))  print_error(mysql, "Failed to update database");
if (DEBUG)printf("%s\n",query); //TEST
    } else {
      sprintf(query,"update stockprices set previous_close = \"null\" where symbol = \"%s\" and date = \"%s\"",Sym,thisDate);
if (!DEBUG)    if (mysql_query(mysql,query))  print_error(mysql, "Failed to update database");
if (DEBUG)printf("%s\n",query); //TEST
      sprintf(query,"update stockprices set day_change = \"null\" where symbol = \"%s\" and date = \"%s\"",Sym,thisDate);
if (!DEBUG)    if (mysql_query(mysql,query))  print_error(mysql, "Failed to update database");
if (DEBUG)printf("%s\n",query); //TEST
    }
  mysql_free_result(result);
  } else {	// not updated, check if force of today is requested
    // was today's date passed? 
    t2 = time(NULL);
    TM = localtime(&t2);
    strftime(buf,sizeof(buf),"%F",TM);
    if ((strncmp(qDate,buf,10)==0)) {	// yes, make sure it is 30 minutes past market close time
      if (TM->tm_hour<15 || (TM->tm_hour==15 && TM->tm_min<30)) {
	printf("No data found for %s, market is still open today\n",Sym); 
	exit(EXIT_FAILURE);
      }
    }
    // use YahooQuote to get today's data, if  local time > 15:30    
    // get date,close,open,prev_close,volume,change,low-high
    sprintf(qURL,"http://download.finance.yahoo.com/d/quotes.csv?s=%s&e=.csv&f=d1l1opvc1mxj1edra2w",Sym);
    chunk.size=0;
    curl_easy_setopt(curl, CURLOPT_URL, qURL);
    res=curl_easy_perform(curl);
    if (res) {	// error, no data retrieved
	printf("Error %d Unable to access the internet\n",res);
	printf("%s\n",errbuf);
	print_error(mysql,"curl error, no data retrieved");
    }
    // was any data returned?
    if (strstr(chunk.memory,"404 Not Found")) { 
      printf("%s not found at YahooQuote for today, \"404\" error\n",Sym);
      curl_easy_cleanup(curl);
      free(chunk.memory);
      #include "Includes/mysql-disconn.inc"
      exit(EXIT_FAILURE);
    }
    
    // parse the data for today
    memset(thisDate,0,sizeof(thisDate));
    saveptr = strtok(chunk.memory ,",");
    strcpy(thisDate,saveptr+1);	// formatted differently as mm/dd/yyyy
    if ((saveptr2=strchr(thisDate,'"'))) memset(saveptr2,32,1);
    // is it valid?
    if (!strcmp(thisDate,"\"N/A\"")) {	// bad symbol, deactivate it
      printf("Bad symbol %s, deactivated\n",Sym);
      sprintf(query,"update stockinfo set active=false where symbol = \"%s\"",Sym);
      mysql_query(mysql,query);
      curl_easy_cleanup(curl);
      free(chunk.memory);
      #include "Includes/mysql-disconn.inc"
      exit(EXIT_FAILURE);
    }
    // verify the date is today
    memset(TM2,0,sizeof(struct tm));
    // adjust the format to match ISO standard
    if (!strptime(thisDate,"%m/%d/%Y",TM2))  printf("strptime failed\n");
    strftime(buf,sizeof(buf),"%F",TM2);
    if (strncmp(qDate,buf,10)) {
      printf("No current data for %s since %s\n",Sym,buf);
      curl_easy_cleanup(curl);
      free(chunk.memory);
      #include "Includes/mysql-disconn.inc"
      exit(EXIT_FAILURE);
    }
    // split out today's data
    saveptr=strtok(NULL,",");
    strcpy(day_close,saveptr);	// save day_close
// DO YOU REALLY WANT TO DO IT THIS WAY?
    if (!strcmp(day_close,"0.00")) {
      printf("symbol %s has no close data\n",Sym);
      curl_easy_cleanup(curl);
      free(chunk.memory);
      #include "Includes/mysql-disconn.inc"
      exit(EXIT_FAILURE);
    }
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(day_open,saveptr);
    else strcpy(day_open,"DEFAULT");
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(prev_close,saveptr);
    else strcpy(prev_close,"DEFAULT");
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(volume,saveptr);
    else strcpy(volume,"DEFAULT");
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(day_change,saveptr);
    else strcpy(day_change,"DEFAULT");
    if ((saveptr2=strchr(day_change,'+'))) memset(saveptr2,32,1);
    saveptr=strtok(NULL,"-");
    strcpy(day_low,saveptr);	// save day_low
    if ((saveptr2=strchr(day_low,'"'))) memset(saveptr2,32,1);
    if (!strlen(day_low) || strstr(saveptr,"N/A")) strcpy(day_low,"DEFAULT");
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(day_high,saveptr);
    else strcpy(day_high,"DEFAULT");
    if ((saveptr2=strchr(day_high,'"'))) memset(saveptr2,0,1);
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(exchange,saveptr+1);
    else strcpy(exchange,"DEFAULT");
    if ((saveptr2=strchr(exchange,'"'))) memset(saveptr2,32,1);
    saveptr=strtok(NULL,",");
    strcpy(buf,saveptr);	// save capitalisation
    // convert capitalisation format to millions
      if ((saveptr2=strchr(buf,'B'))!=NULL) {	// convert Billions to Millions
	  memset(saveptr2,0,1);
	  sprintf(capitalisation,"%.4f",strtod(buf,NULL)*1000);
      } else if ((saveptr2=strchr(buf,'M'))!=NULL) {	// already in Millions
	  memset(saveptr2,0,1);
	  strcpy(capitalisation,buf);
      } else if ((saveptr2=strchr(buf,'T'))!=NULL) {	// convert Trillions to Millions
	  memset(saveptr2,0,1);
	  sprintf(capitalisation,"%.4f",strtod(buf,NULL)*1000000);
      } else if ((saveptr2=strchr(buf,'K'))!=NULL) {	// convert Thousands to Millions
	  memset(saveptr2,0,1);
	  sprintf(capitalisation,"%.4f",strtod(buf,NULL)*0.001);
      } else {	// just copy it over
	if (strlen(buf) && !strstr(buf,"N/A")) strcpy(capitalisation,buf); else strcpy(capitalisation,"DEFAULT");
      }
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(earnings,saveptr);
    else strcpy(earnings,"DEFAULT");
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(dividend,saveptr);
    else strcpy(dividend,"DEFAULT");
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(p_e_ratio,saveptr);
    else strcpy(p_e_ratio,"DEFAULT");
    saveptr=strtok(NULL,",");
    if (strlen(saveptr) && !strstr(saveptr,"N/A")) strcpy(avg_volume,saveptr);
    else strcpy(avg_volume,"DEFAULT");
    saveptr=strtok(NULL,",");
    strcpy(low_52weeks,saveptr+1);	// save low_52weeks
    if ((saveptr2=strchr(low_52weeks,'-'))) memset(saveptr2,0,1);
    strcpy(high_52weeks,saveptr2+1);	// save high_52weeks
    if ((saveptr2=strchr(high_52weeks,'"'))) memset(saveptr2,0,1);
    
    // build the SQL string
    sprintf(query,"select symbol from stockprices where symbol = \"%s\" and date = \"%s\"",Sym,qDate);
    if (mysql_query(mysql,query)) { print_error(mysql, "02 Failed to query database");	}
    result=mysql_store_result(mysql);
    if (result==NULL) { print_error(mysql, "store_results failed"); } 
    // build and run the update or insert query
    if (mysql_num_rows(result)) 	// existing data, just update it
      sprintf(query,"update stockprices set day_open=%s,day_high=%s,day_low=%s,day_close=%s,volume=%s,day_change=%s,previous_close=%s \
      where symbol = \"%s\" and date = \"%s\"",day_open,day_high,day_low,day_close,volume,day_change,prev_close,Sym,qDate);
    else 	// new date, insert it
      sprintf(query,"insert into stockprices (symbol,date,day_open,day_high,day_low,day_close,volume,day_change,previous_close) \
      VALUES(\"%s\",\"%s\",%s,%s,%s,%s,%s,%s,%s)",Sym,qDate,day_open,day_high,day_low,day_close,volume,day_change,prev_close);
    mysql_free_result(result);
    // update the database
if (!DEBUG)    if (mysql_query(mysql,query))  print_error(mysql, "Failed to update stockprices for today");
if (DEBUG)printf("%s\n",query); //TEST
    // update stockinfo
    sprintf(query,"update stockinfo set exchange=\"%s\",capitalisation=%s,low_52weeks=%s,high_52weeks=%s,earnings=%s,dividend=%s,p_e_ratio=%s,avg_volume=%s \
    where symbol = \"%s\"",exchange,capitalisation,low_52weeks,high_52weeks,earnings,dividend,p_e_ratio,avg_volume,Sym);
if (!DEBUG)    if (mysql_query(mysql,query))  print_error(mysql, "Failed to update stockinfo");
if (DEBUG) printf("%s\n",query); //TEST
      updated++;
  }	// end If !updated
  
  curl_easy_cleanup(curl);
  free(chunk.memory);
  // update the beancounter timestamp
if (!DEBUG)  if (updated) mysql_query(mysql,"update beancounter set data_last_updated = NOW()");
  // finished with the database
  #include "Includes/mysql-disconn.inc"
  exit(EXIT_SUCCESS);
}
